import sqlite3 from 'sqlite3';
import { open, Database } from 'sqlite';
import path from 'path';
import fs from 'fs';

// SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
let db: Database<sqlite3.Database, sqlite3.Statement> | null = null;

export const initSQLiteDB = async (): Promise<Database<sqlite3.Database, sqlite3.Statement>> => {
    if (db) return db;

    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº Í≤ΩÎ°ú
    const dbPath = path.join(process.cwd(), 'data', 'finalmessage.db');
    
    // data ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    const dataDir = path.dirname(dbPath);
    if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir, { recursive: true });
    }

    // SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó¥Í∏∞
    db = await open({
        filename: dbPath,
        driver: sqlite3.Database
    });

    console.log('‚úÖ SQLite database connected successfully');
    
    // ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    await createTables();
    
    return db;
};

const createTables = async () => {
    if (!db) throw new Error('Database not initialized');

    // ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î
    await db.exec(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            password_hash TEXT,
            provider TEXT DEFAULT 'email',
            provider_id TEXT,
            avatar_url TEXT,
            is_verified BOOLEAN DEFAULT 0,
            verification_token TEXT,
            reset_token TEXT,
            reset_token_expires DATETIME,
            email_verification_code TEXT,
            email_verification_expires DATETIME,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `);

    // Î©îÏãúÏßÄ ÌÖåÏù¥Î∏î
    await db.exec(`
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            recipient_emails TEXT,
            delivery_date DATETIME NOT NULL,
            is_delivered BOOLEAN DEFAULT 0,
            delivery_method TEXT DEFAULT 'email',
            blockchain_hash TEXT,
            verification_hash TEXT,
            requires_legal_notary BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )
    `);

    // Í≤∞Ï†ú ÌÖåÏù¥Î∏î
    await db.exec(`
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            message_id INTEGER,
            amount DECIMAL(10,2) NOT NULL,
            currency TEXT DEFAULT 'KRW',
            payment_method TEXT,
            payment_id TEXT UNIQUE,
            merchant_uid TEXT UNIQUE,
            status TEXT DEFAULT 'pending',
            paid_at DATETIME,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (message_id) REFERENCES messages(id) ON DELETE SET NULL
        )
    `);

    // Í¥ÄÎ¶¨Ïûê ÌÖåÏù¥Î∏î
    await db.exec(`
        CREATE TABLE IF NOT EXISTS admins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            password_hash TEXT NOT NULL,
            role TEXT DEFAULT 'admin',
            is_active BOOLEAN DEFAULT 1,
            last_login DATETIME,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `);

    // Í∏∞Î≥∏ Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ± (ÎπÑÎ∞ÄÎ≤àÌò∏: admin123)
    await db.run(`
        INSERT OR IGNORE INTO admins (email, name, password_hash, role) 
        VALUES ('admin@finalmessage.com', 'Administrator', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeQEQOTDbY7QqYaAK', 'super_admin')
    `);

    console.log('‚úÖ SQLite tables created successfully');
};

export const getSQLiteDB = (): Database<sqlite3.Database, sqlite3.Statement> => {
    if (!db) throw new Error('Database not initialized. Call initSQLiteDB first.');
    return db;
};

export const closeSQLiteDB = async (): Promise<void> => {
    if (db) {
        await db.close();
        db = null;
        console.log('üì¶ SQLite database connection closed');
    }
};